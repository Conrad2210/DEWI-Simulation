//
// Generated file, do not edit! Created by nedtool 4.6 from src/networklayer/CIDERNet/RLL/common/RLLFrame.msg.
//

#ifndef _RLLFRAME_M_H_
#define _RLLFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    using namespace std;
    #include "RLLControlInfo_m.h"
// }}

/**
 * Class generated from <tt>src/networklayer/CIDERNet/RLL/common/RLLFrame.msg:25</tt> by nedtool.
 * <pre>
 * message RLLFrame
 * {
 *     RLLControlInfo CntrlInfo;
 * 
 * 
 * 
 * }
 * </pre>
 */
class RLLFrame : public ::cMessage
{
  protected:
    RLLControlInfo CntrlInfo_var;

  private:
    void copy(const RLLFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RLLFrame&);

  public:
    RLLFrame(const char *name=NULL, int kind=0);
    RLLFrame(const RLLFrame& other);
    virtual ~RLLFrame();
    RLLFrame& operator=(const RLLFrame& other);
    virtual RLLFrame *dup() const {return new RLLFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual RLLControlInfo& getCntrlInfo();
    virtual const RLLControlInfo& getCntrlInfo() const {return const_cast<RLLFrame*>(this)->getCntrlInfo();}
    virtual void setCntrlInfo(const RLLControlInfo& CntrlInfo);
};

inline void doPacking(cCommBuffer *b, RLLFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RLLFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _RLLFRAME_M_H_

