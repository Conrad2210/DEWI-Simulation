//
// Generated file, do not edit! Created by nedtool 4.6 from src/applications/RLLApp/RLLAppMsg.msg.
//

#ifndef _RLLAPPMSG_M_H_
#define _RLLAPPMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	using namespace std;
	#include "Ieee802154Def.h"
// }}

/**
 * Class generated from <tt>src/applications/RLLApp/RLLAppMsg.msg:23</tt> by nedtool.
 * <pre>
 * packet RLLAppMsg
 * {
 *     string sourceName; 	// name of the source node
 *     string destName;		// name of the destination node
 *     simtime_t creationTime; // creation time of the packet
 *     int burstId;
 *     int messageId;
 * }
 * </pre>
 */
class RLLAppMsg : public ::cPacket
{
  protected:
    opp_string sourceName_var;
    opp_string destName_var;
    simtime_t creationTime_var;
    int burstId_var;
    int messageId_var;

  private:
    void copy(const RLLAppMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RLLAppMsg&);

  public:
    RLLAppMsg(const char *name=NULL, int kind=0);
    RLLAppMsg(const RLLAppMsg& other);
    virtual ~RLLAppMsg();
    RLLAppMsg& operator=(const RLLAppMsg& other);
    virtual RLLAppMsg *dup() const {return new RLLAppMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSourceName() const;
    virtual void setSourceName(const char * sourceName);
    virtual const char * getDestName() const;
    virtual void setDestName(const char * destName);
    virtual simtime_t getCreationTime() const;
    virtual void setCreationTime(simtime_t creationTime);
    virtual int getBurstId() const;
    virtual void setBurstId(int burstId);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doPacking(cCommBuffer *b, RLLAppMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RLLAppMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _RLLAPPMSG_M_H_

